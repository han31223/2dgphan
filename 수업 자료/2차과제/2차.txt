1.

git 은 문서나 설계도, 소스 코드등의 변경점을 관리해주는 소프트웨어로 매우 빠른 저장소를 지원한다고합니다. git은 어떤 같은 프로젝트를 진행할 때 서로 겹치지않게 변경을 관리하기 용이한 소프트웨어인것입니다. git의 작업폴더는 전체기록과 각 기록을 추적할 수 있는 정보를 포함하고 있는 저장소입니다. git 은 로컬 저장소를 세 개로 분류하는데 첫번째는 실제 파일들로 이루어져있는 작업 디렉토리, 두번째는 준비영역의 역할을 하는 인덱스, 마지막은 최정 확정본인 HEAD 입니다. git 을 사용하기 위해선 저장소를 만들어야합니다. 처음에는 git hub 홈페이지에서 온라인 저장소를 만드는 것입니다 홈페이지 에서 온라인 저장소를 만들고 나선 자신의 컴퓨터에서 작업할 로컬 저장소를 만들어야합니다. 로컬 저장소에는 깃허브 온라인 저장소와 동일안 디렉터리로 만든뒤 'git init' 명령어를 이용하여 이 디렉터리가 깃 저장소라고 표시해두는 것입니다. 그래고 'git femote add origin (주소)' 로 온라인 저장소와 로컬 저장소를 연결합니다. 처음 로컬저장소에서 파일을 변경하기 위해선 온라인 저장소에 있는 내용을 가져와야합니다. 'git clone'를 사용하여 불러올 수 있습니다. 또한 'git status' 로 온라인 저장소와 로컬 간의 차이를 볼 수 있습니다.

변경을 위해 'git add (파일이름) ' 을 사용하여 변경된 파일을 인덱스로 추가할 수 있습니다. 인덱스에 추가된 파일들을 'git comit' 을 이용해 head 에 반영하는것입니다. head 까지는 아직 로컬저장소 안에 있습니다. 이 변경점을 원격 저장소로 보내기위해 'git push origin'을 이용하여 원격 저장소로 보냅니다. 변경 내용을 보낼뿐 아니라 'git ppull'을 이용하여 수정된내용을 가져올 수 도 있습니다. 또한 git은 가지치기라는 기능이 있습니다. 이 기능은 안전하게 격리된 상태에서 무언가를 만들때 사용됩니다. 저장소를 처음 마들면 master 가지가 만들어지고 'git checkout -b' 명령어로 다른가지로 만들고 이동하면서 변경할수 있고 'git branch' 명령어로 가지를 삭제할 수도 있습니다. 가지는 나중에 수정을 거친뒤 'git merge'로 병합할수 잇습니다. 또한 꼬리표를 달아놓을수도 있고, 'git checkout'로 변경내용을 되돌릴 수도 있습니다.

 

2.

Python 3.8.5 (tags/v3.8.5:580fbb0, Jul 20 2020, 15:57:54) [MSC v.1924 64 bit (AMD64)] on win32

Type "help", "copyright", "credits" or "license()" for more information.

>>> 1+2

3

>>> 100-1

99

>>> 7*52

364

>>> 1024/8

128.0

>>> 64 + 3

67

>>> 23 -1

22

>>> 342*4

1368

>>> 1/2

0.5

>>> 1//2

0

>>> 4/3

1.3333333333333333

>>> 4//3

1

>>> 7%3

1

>>> 7.5%3

1.5

>>> 4%2.1

1.9

>>> 6%2.3

1.4000000000000004

>>> 8%3.4

1.2000000000000002

>>> 

>>> 3.141592653589793 * (3*3)

28.274333882308138

>>> 3.141592653589793 * 3**2

28.274333882308138

>>> 3.141592653589793 * (9 **2)

254.46900494077323

>>> 3.141592653589793 * (20 **2)

1256.6370614359173

>>> 3.141592653589793 * (1.5 **2)

7.0685834705770345

>>> 3.141592653589793 * (7 **2)

153.93804002589985

>>> 3.141592653589793 * (100 **2)

31415.926535897932

>>> 

>>> pi = 3.141592653589793

>>> 

>>> pi * 4 ** 2

50.26548245743669

>>> pi * 2.5 ** 2

19.634954084936208

>>> pi * 8 **2

201.06192982974676

>>> pi * 34 ** 2

3631.681107549801

>>> pi * 6.3 ** 2

124.68981242097888

>>> 

>>> print(pi)

3.141592653589793

>>> 

>>> r=7

>>> 

>>> area = pi * r ** 2

>>> 

>>> print(area)

153.93804002589985

>>> r=3

>>> 

>>> area = pi * r ** 2

>>> 

>>> print(area)

SyntaxError: multiple statements found while compiling a single statement

>>> r=3

>>> 

>>> area = pi * r **2

>>> 

>>> print(area)

28.274333882308138

>>> 

>>> r=11

>>> 

>>> area = pi * r ** 2

>>> 

>>> print(area)

380.132711084365

>>> 

>>> name1 = "Trump"

>>> name2 = '강다니엘'

>>> 

>>> printf(name1)

Traceback (most recent call last):

  File "<pyshell#56>", line 1, in <module>

    printf(name1)

NameError: name 'printf' is not defined

>>> print(name1)

Trump

>>> print(name2)

강다니엘

>>> 

>>> order = 4

>>> pi = 3.141592

>>> name = "Trump"

>>> 

>>> type(order)

<class 'int'>

>>> type(pi)

<class 'float'>

>>> type(name)

<class 'str'>

>>> <class 'str'>

SyntaxError: invalid syntax

>>> 

>>> 4>3

True

>>> 4/5 < -1.3

False

>>> 100 == 100

True

>>> 10 >= 10

True

>>> a = 365 > 366

>>> print(a)

False

>>> tye(a)

Traceback (most recent call last):

  File "<pyshell#75>", line 1, in <module>

    tye(a)

NameError: name 'tye' is not defined

>>> type(a)

<class 'bool'>

>>> 

>>> first = "Daehyun"

>>> last = "Lee"

>>> name = first + " " + last

>>> name

'Daehyun Lee'

>>> print(name)

Daehyun Lee

>>> 

>>> name * 2

'Daehyun LeeDaehyun Lee'

>>> name * 3

'Daehyun LeeDaehyun LeeDaehyun Lee'

>>> 

>>> name [0]

'D'

>>> name [2]

'e'

>>> name [-1]

'e'

>>> name [-2]

'e'

>>> name [ 5]

'u'

>>> name [7]

' '

>>>  title = "Python 2D Game Programming"

 

SyntaxError: unexpected indent

>>> title = "Python 2D Game Programming"

>>> title[0:6]

'Python'

>>> title[7:9]

'2D'

>>> title[10:14]

'Game'

>>> title[:6]

'Python'

>>> title[-11:]

'Programming'

>>> title[::2]

'Pto DGm rgamn'

>>> title[::-1]

'gnimmargorP emaG D2 nohtyP'

>>> title[-2:]

'ng'

>>> title[2:2:2]

''

>>> title[1::3]

'yo2Gerrmg'

>>> 

>>> twice = [ 'momo', 'sana', 'zwi', 'nayun', 'dahyun']

>>> blac_pink = ['jisu', 'jeni','rose','risa']

>>> 

>>> twice

['momo', 'sana', 'zwi', 'nayun', 'dahyun']

>>> 

>>> twice.append('jihyo')

>>> twice

['momo', 'sana', 'zwi', 'nayun', 'dahyun', 'jihyo']

>>> twice.sort()

>>> twice

['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi']

>>> len(twice)

6

>>> unite = twice + black_pink

Traceback (most recent call last):

  File "<pyshell#118>", line 1, in <module>

    unite = twice + black_pink

NameError: name 'black_pink' is not defined

>>> unite

Traceback (most recent call last):

  File "<pyshell#119>", line 1, in <module>

    unite

NameError: name 'unite' is not defined

>>> black_pink = ['jisu', 'jeni','rose','risa']

>>> unite = twice + black_pink

>>> unite

['dahyun', 'jihyo', 'momo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']

>>> unite.remove('momo')

>>> unite

['dahyun', 'jihyo', 'nayun', 'sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']

>>> unite[0]

'dahyun'

>>> unite[0]

'dahyun'

>>> unite[-1]

'risa'

>>> unite[:3]

['dahyun', 'jihyo', 'nayun']

>>> unite[-3:]

['jeni', 'rose', 'risa']

>>> unite[-6:]

['sana', 'zwi', 'jisu', 'jeni', 'rose', 'risa']

>>> unite[:6]

['dahyun', 'jihyo', 'nayun', 'sana', 'zwi', 'jisu']

>>> 

>>> score = { 'momo' : 80, 'zei' : 85, 'sana' : 98 }

>>> type(score)

<class 'dict'>

>>> score['momo']

80

>>> score['nayun']

Traceback (most recent call last):

  File "<pyshell#136>", line 1, in <module>

    score['nayun']

KeyError: 'nayun'

>>> score['nayun'] = 100

>>> score

{'momo': 80, 'zei': 85, 'sana': 98, 'nayun': 100}

>>> del score [ 'momo']

>>> score

{'zei': 85, 'sana': 98, 'nayun': 100}

>>> score.keys()

dict_keys(['zei', 'sana', 'nayun'])

>>> score.values()

dict_values([85, 98, 100])

>>> 'zwi' in score

False

>>> 'momo' in score

False

>>> score.clear()

>>> score

{}

>>> 

>>> t1 = (1,2,3)

>>> t2 = (1, )

>>> t3 =()

>>> t4 = 1,2,3,4

>>> t4

(1, 2, 3, 4)

>>> type(t4)

<class 'tuple'>

>>> t5 = (1, 'a', "park",(1,2))

>>> t1[1:]

(2, 3)

>>> t1 + t5

(1, 2, 3, 1, 'a', 'park', (1, 2))

>>> t4 * t4

Traceback (most recent call last):

  File "<pyshell#157>", line 1, in <module>

    t4 * t4

TypeError: can't multiply sequence by non-int of type 'tuple'

>>> t4 * 2

(1, 2, 3, 4, 1, 2, 3, 4)

>>> 

>>> 

>>> t5 * t5

Traceback (most recent call last):

  File "<pyshell#161>", line 1, in <module>

    t5 * t5

TypeError: can't multiply sequence by non-int of type 'tuple'

>>> t5 * 2

(1, 'a', 'park', (1, 2), 1, 'a', 'park', (1, 2))

>>> 

>>> 

>>> s1 = { 1,2,3}

>>> type(s1)

<class 'set'>

>>> s1 = {1,2,3,4}

>>> ss1

Traceback (most recent call last):

  File "<pyshell#168>", line 1, in <module>

    ss1

NameError: name 'ss1' is not defined

>>> s1 = {1,2,2,4}

>>> s1

{1, 2, 4}

>>> l1 = [1,2,2,2,2,3,3,3,3,5,5,5,5,5]

>>> s1 = set(l1)

>>> s1

{1, 2, 3, 5}

>>> s2 = {3567}

>>> s2 = {3,5,6,7}

>>> s1 + s2

Traceback (most recent call last):

  File "<pyshell#176>", line 1, in <module>

    s1 + s2

TypeError: unsupported operand type(s) for +: 'set' and 'set'

>>> s1 | s2

{1, 2, 3, 5, 6, 7}

>>> s1 & s2

{3, 5}

>>> s2 - s1

{6, 7}

>>> s1 - s2

{1, 2}

>>> s1.add(8)

>>> s1

{1, 2, 3, 5, 8}

>>> s2.remove(6)

>>> s2

{3, 5, 7}

>>> s1.remove(3)

>>> s1

{1, 2, 5, 8}

>>> s2.add(9)

>>> s2

{3, 5, 7, 9}

>>> 

 

파이썬은 세미클론을 안쓰고 줄마다 나늬어서 정리하기 편해보이고 간단해보이는 장점이 있는 것같다.

그러나 내생각에는 수정이 불편하고 과거의 것을 찾기 힘들거같다.